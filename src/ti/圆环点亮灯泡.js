/**
 * 
 * 一个圆环上有100个灯泡，灯泡有打开和关闭两种状态，灯泡的状态随机，按一个灯泡的开关，相邻的两个灯泡的状态也发生一次变化。
 * 比如暗-亮-暗，按中间灯泡，变化为亮-暗-亮,如何使灯泡全亮
 * 
解题思路：
第一阶段：

如果给100个灯泡编号0～99 ，顺序往下走，如果灯是亮的就不管，灭的就按下后面灯泡使这个灯亮(在第一循环内，也就是还没有从99走到0)。
如果都是亮的那正好万事大吉完事！如果不是的话，期间肯定有是灭的，不管它在哪个位置，重复【亮的就不管，灯是灭的把下一个灯泡按一下开关】
规则(都在第一轮循环里面)。
98号灯肯定是灭的，看99号灯是灭还是亮，
如果99号灯是灭的，那就再按一下99号灯的开关，这样全环只有一个灭的灯(0号灯)。
如果99号灯是亮的，这样只有98号灯是灭的。总之，全环只有一个灯是灭的。

第二阶段：

将那个灭的灯标记为0号灯，后面的灯依次按顺序排序，每3个一组，中间的那个灯按开关，举例，将2号灯(关闭)，1，2，3号灯就都灭了，整个循环跑完，所有的灯都灭了。
[0,1,1,1,1,1,1]
第三阶段：

每个灯泡的开关都按一遍。以上步骤就可以使最后的灯泡全亮。
 * 
 *  **/

let arrs = [0, 0, 1, 1, 1, 1, 1, 0, 1];
const length = arrs.length;
function turnAll(arrs) {
  for (let i = 0; i < arrs.length - 2; i++) {
    if (arrs[i] === 0) {
      arrs[i] = 1;
      arrs[i + 1] = arrs[i + 1] === 0 ? 1 : 0;
    }
  }
  if (arrs[length - 1] === 0) {
    arrs[length - 1] = 1;
    arrs[length - 2] = 1;
    arrs[0] = 0;
  }
  arrs.sort();

  for (let i = 1; i < length - 1; i = i + 3) {
    arrs[i] = 0;
    arrs[i + 1] = 0;
    arrs[i + 2] = 0;
  }
  console.log("arrs", arrs);
}

turnAll(arrs);

function turnOn(arr, i) {
  arr[i] = 1;
  arr[i + 1] = arr[i + 1] === 0 ? 1 : 0;
}
function turnOff(arr, i) {}
